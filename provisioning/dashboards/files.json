{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "accept": "",
            "id": "file",
            "labelWidth": 10,
            "section": "",
            "title": "File",
            "tooltip": "",
            "type": "file",
            "uid": "c63ec810-e7f7-471f-9f9d-a8fd58330982",
            "unit": "",
            "value": []
          }
        ],
        "initial": {
          "code": "console.log(context.panel.data, context.panel.response, context.panel.initial, context.panel.elements);\n\nreturn;\n\n/**\n * Data Source\n * Requires form elements to be defined\n */\nconst dataQuery = context.utils.toDataQueryResponse(context.panel.response);\nconsole.log(dataQuery);",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.state === 'Done') {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n  });\n\n\n/**\n * Data Source payload\n */\nconst getPayload = async () => {\n  const file = payload.file[0];\n  const base64 = await toBase64(file);\n\n  return {\n    file,\n    base64,\n  }\n}\n\nreturn getPayload();",
          "method": "datasource",
          "payload": {
            "0": "c",
            "1": "o",
            "2": "n",
            "3": "s",
            "4": "t",
            "5": " ",
            "6": "p",
            "7": "a",
            "8": "y",
            "9": "l",
            "10": "o",
            "11": "a",
            "12": "d",
            "13": " ",
            "14": "=",
            "15": " ",
            "16": "{",
            "17": "}",
            "18": ";",
            "19": "\n",
            "20": "\n",
            "21": "e",
            "22": "l",
            "23": "e",
            "24": "m",
            "25": "e",
            "26": "n",
            "27": "t",
            "28": "s",
            "29": ".",
            "30": "f",
            "31": "o",
            "32": "r",
            "33": "E",
            "34": "a",
            "35": "c",
            "36": "h",
            "37": "(",
            "38": "(",
            "39": "e",
            "40": "l",
            "41": "e",
            "42": "m",
            "43": "e",
            "44": "n",
            "45": "t",
            "46": ")",
            "47": " ",
            "48": "=",
            "49": ">",
            "50": " ",
            "51": "{",
            "52": "\n",
            "53": " ",
            "54": " ",
            "55": "i",
            "56": "f",
            "57": " ",
            "58": "(",
            "59": "!",
            "60": "e",
            "61": "l",
            "62": "e",
            "63": "m",
            "64": "e",
            "65": "n",
            "66": "t",
            "67": ".",
            "68": "v",
            "69": "a",
            "70": "l",
            "71": "u",
            "72": "e",
            "73": ")",
            "74": " ",
            "75": "{",
            "76": "\n",
            "77": " ",
            "78": " ",
            "79": " ",
            "80": " ",
            "81": "r",
            "82": "e",
            "83": "t",
            "84": "u",
            "85": "r",
            "86": "n",
            "87": ";",
            "88": "\n",
            "89": " ",
            "90": " ",
            "91": "}",
            "92": "\n",
            "93": "\n",
            "94": " ",
            "95": " ",
            "96": "p",
            "97": "a",
            "98": "y",
            "99": "l",
            "100": "o",
            "101": "a",
            "102": "d",
            "103": "[",
            "104": "e",
            "105": "l",
            "106": "e",
            "107": "m",
            "108": "e",
            "109": "n",
            "110": "t",
            "111": ".",
            "112": "i",
            "113": "d",
            "114": "]",
            "115": " ",
            "116": "=",
            "117": " ",
            "118": "e",
            "119": "l",
            "120": "e",
            "121": "m",
            "122": "e",
            "123": "n",
            "124": "t",
            "125": ".",
            "126": "v",
            "127": "a",
            "128": "l",
            "129": "u",
            "130": "e",
            "131": ";",
            "132": "\n",
            "133": "}",
            "134": ")",
            "135": "\n",
            "136": "\n",
            "137": "r",
            "138": "e",
            "139": "t",
            "140": "u",
            "141": "r",
            "142": "n",
            "143": " ",
            "144": "p",
            "145": "a",
            "146": "y",
            "147": "l",
            "148": "o",
            "149": "a",
            "150": "d",
            "151": ";",
            "152": "\n",
            "153": "\n",
            "154": "/",
            "155": "*",
            "156": "*",
            "157": "\n",
            "158": " ",
            "159": "*",
            "160": " ",
            "161": "D",
            "162": "a",
            "163": "t",
            "164": "a",
            "165": " ",
            "166": "S",
            "167": "o",
            "168": "u",
            "169": "r",
            "170": "c",
            "171": "e",
            "172": " ",
            "173": "p",
            "174": "a",
            "175": "y",
            "176": "l",
            "177": "o",
            "178": "a",
            "179": "d",
            "180": "\n",
            "181": " ",
            "182": "*",
            "183": "/",
            "184": " ",
            "185": "\n",
            "186": "r",
            "187": "e",
            "188": "t",
            "189": "u",
            "190": "r",
            "191": "n",
            "192": " ",
            "193": "{",
            "194": "\n",
            "195": " ",
            "196": " ",
            "197": "r",
            "198": "a",
            "199": "w",
            "200": "S",
            "201": "q",
            "202": "l",
            "203": ":",
            "204": " ",
            "205": "'",
            "206": "'",
            "207": ",",
            "208": "\n",
            "209": " ",
            "210": " ",
            "211": "f",
            "212": "o",
            "213": "r",
            "214": "m",
            "215": "a",
            "216": "t",
            "217": ":",
            "218": " ",
            "219": "'",
            "220": "t",
            "221": "a",
            "222": "b",
            "223": "l",
            "224": "e",
            "225": "'",
            "226": ",",
            "227": "\n",
            "228": "}",
            "229": ";",
            "editorMode": "code",
            "format": "table",
            "rawQuery": true,
            "rawSql": "INSERT INTO files (name, file)\nVALUES ('${payload.file.name}', '${payload.base64}');",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "payloadMode": "custom"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "refId": "A"
        }
      ],
      "title": "Datasource Upload as Base64",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 16,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "autoPlay": true,
        "buttons": [],
        "controls": true,
        "formats": [
          "audio",
          "image",
          "pdf",
          "video"
        ],
        "height": 0,
        "heightMode": "original",
        "infinityPlay": false,
        "name": "file",
        "noResultsMessage": "Nothing to display...",
        "scale": "auto",
        "toolbar": true,
        "width": 0,
        "widthMode": "auto",
        "zoomType": "default"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT file FROM files WHERE name='$name';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Current File",
      "type": "volkovlabs-image-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 3,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": [
              "name",
              "oldValue",
              "newValue"
            ],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "accept": "",
            "id": "file",
            "labelWidth": 10,
            "section": "",
            "title": "File",
            "tooltip": "",
            "type": "file",
            "uid": "c63ec810-e7f7-471f-9f9d-a8fd58330982",
            "unit": "",
            "value": []
          }
        ],
        "initial": {
          "code": "console.log(context.panel.data, context.panel.response, context.panel.initial, context.panel.elements);\n\nreturn;\n\n/**\n * Data Source\n * Requires form elements to be defined\n */\nconst dataQuery = context.utils.toDataQueryResponse(context.panel.response);\nconsole.log(dataQuery);",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "multipart/form-data",
          "datasource": "PostgreSQL",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n  });\n\n\n/**\n * Data Source payload\n */\nconst getPayload = async () => {\n  const file = payload.file[0];\n  const base64 = await toBase64(file);\n\n  return {\n    rawSql: `INSERT INTO files (name, file)\nVALUES ('${file.name}', '${base64}');`,\n    format: 'table',\n  }\n}\n\nreturn getPayload();",
          "method": "POST",
          "payload": "const payload = {};\n\nelements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "payloadMode": "all",
          "url": "http://localhost:3002/upload"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.0.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "refId": "A"
        }
      ],
      "title": "HTTP Upload as Form Data",
      "type": "volkovlabs-form-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "isNone": true,
          "selected": false,
          "text": "None",
          "value": ""
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PCC52D03280B7034C"
        },
        "definition": "select name from files",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "name",
        "options": [],
        "query": "select name from files",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Files",
  "uid": "eaad38e5-abc9-4388-b061-97ef9f6d600b",
  "version": 1,
  "weekStart": ""
}
