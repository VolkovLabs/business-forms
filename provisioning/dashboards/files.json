{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 7,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "accept": "",
            "id": "file",
            "labelWidth": 10,
            "section": "",
            "title": "File",
            "tooltip": "",
            "type": "file",
            "uid": "c63ec810-e7f7-471f-9f9d-a8fd58330982",
            "unit": "",
            "value": []
          }
        ],
        "initial": {
          "code": "console.log(context.panel.data, context.panel.response, context.panel.initial, context.panel.elements);\n\nreturn;\n\n/**\n * Data Source\n * Requires form elements to be defined\n */\nconst dataQuery = context.utils.toDataQueryResponse(context.panel.response);\nconsole.log(dataQuery);",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.state === 'Done') {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n  });\n\n\n/**\n * Data Source payload\n */\nconst getPayload = async () => {\n  const file = payload.file[0];\n  const base64 = await toBase64(file);\n\n  return {\n    file,\n    base64,\n  }\n}\n\nreturn getPayload();",
          "method": "datasource",
          "payload": {
            "editorMode": "code",
            "format": "table",
            "rawQuery": true,
            "rawSql": "INSERT INTO files (name, file)\nVALUES ('${payload.file.name}', '${payload.base64}');",
            "refId": "A",
            "sql": {
              "columns": [
                {
                  "parameters": [],
                  "type": "function"
                }
              ],
              "groupBy": [
                {
                  "property": {
                    "type": "string"
                  },
                  "type": "groupBy"
                }
              ],
              "limit": 50
            }
          },
          "payloadMode": "custom"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "refId": "A"
        }
      ],
      "title": "Datasource Upload as Base64",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 16,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "autoPlay": true,
        "buttons": [],
        "controls": true,
        "formats": ["audio", "image", "pdf", "video"],
        "height": 0,
        "heightMode": "original",
        "infinityPlay": false,
        "name": "file",
        "noResultsMessage": "Nothing to display...",
        "scale": "auto",
        "toolbar": true,
        "width": 0,
        "widthMode": "auto",
        "zoomType": "default"
      },
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT file FROM files WHERE name='$name';",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Current File",
      "type": "volkovlabs-image-panel"
    },
    {
      "datasource": {
        "type": "grafana-postgresql-datasource",
        "uid": "PCC52D03280B7034C"
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 3,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "accept": "",
            "id": "file",
            "labelWidth": 10,
            "section": "",
            "title": "File",
            "tooltip": "",
            "type": "file",
            "uid": "c63ec810-e7f7-471f-9f9d-a8fd58330982",
            "unit": "",
            "value": []
          }
        ],
        "initial": {
          "code": "console.log(context.panel.data, context.panel.response, context.panel.initial, context.panel.elements);\n\nreturn;\n\n/**\n * Data Source\n * Requires form elements to be defined\n */\nconst dataQuery = context.utils.toDataQueryResponse(context.panel.response);\nconsole.log(dataQuery);",
          "contentType": "application/json",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "multipart/form-data",
          "datasource": "PostgreSQL",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nconst toBase64 = (file) =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = reject;\n  });\n\n\n/**\n * Data Source payload\n */\nconst getPayload = async () => {\n  const file = payload.file[0];\n  const base64 = await toBase64(file);\n\n  return {\n    rawSql: `INSERT INTO files (name, file)\nVALUES ('${file.name}', '${base64}');`,\n    format: 'table',\n  }\n}\n\nreturn getPayload();",
          "method": "POST",
          "payload": {},
          "payloadMode": "all",
          "url": "http://localhost:3002/upload"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.1.0",
      "targets": [
        {
          "datasource": {
            "type": "grafana-postgresql-datasource",
            "uid": "PCC52D03280B7034C"
          },
          "refId": "A"
        }
      ],
      "title": "HTTP Upload as Form Data",
      "type": "volkovlabs-form-panel"
    }
  ],
  "refresh": "",
  "schemaVersion": 39,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "Business Suite.svg",
          "value": "Business Suite.svg"
        },
        "datasource": {
          "type": "grafana-postgresql-datasource",
          "uid": "PCC52D03280B7034C"
        },
        "definition": "select name from files",
        "hide": 0,
        "includeAll": false,
        "multi": false,
        "name": "name",
        "options": [],
        "query": "select name from files",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Files",
  "uid": "eaad38e5-abc9-4388-b061-97ef9f6d600b",
  "version": 1,
  "weekStart": ""
}
