{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 2,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "marcusolsson-json-datasource",
        "uid": "serverapi"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 1,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "/**\n * Update device variable\n */\n\nif (context.element.id === 'device') {\n  context.grafana.locationService.partial({\n    'var-device': context.element.value,\n  })\n}",
        "elements": [
          {
            "allowCustomValue": false,
            "id": "device",
            "options": [
              {
                "id": "device1",
                "label": "device1",
                "type": "string",
                "value": "device1"
              },
              {
                "id": "device2",
                "label": "device2",
                "type": "string",
                "value": "device2"
              }
            ],
            "optionsSource": "Custom",
            "title": "Device",
            "type": "select",
            "uid": "device",
            "value": "device1"
          },
          {
            "id": "device1Field",
            "max": 10,
            "min": 0,
            "title": "Device 1 Field",
            "type": "number",
            "uid": "device1Field",
            "value": 0
          },
          {
            "id": "comment",
            "title": "Comment",
            "type": "textarea",
            "uid": "comment",
            "value": ""
          }
        ],
        "initial": {
          "code": "/**\n * Convert JSON to form elements array\n */\nconst formElements = JSON.parse(context.panel.data.series[0].fields[0].values[0])\n/**\n * Set elements with helpers\n */\ncontext.panel.onChangeElements(formElements.map((element) => {\n  const elementInForm = context.panel.elements.find((item) => item.uid === element.uid);\n  let value = element.value;\n\n  if (element.uid === 'comment' && elementInForm) {\n    value = elementInForm.value;\n  }\n\n  return {\n    ...element,\n    value,\n    helpers: {\n      showIf: () => true,\n      disableIf: () => false,\n      getOptions: () => element.options,\n    }\n  }\n}),\n);\n",
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "horizontal",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "single"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "cacheDurationSeconds": 300,
          "datasource": {
            "type": "marcusolsson-json-datasource",
            "uid": "serverapi"
          },
          "fields": [
            {
              "jsonPath": "$",
              "language": "jsonpath",
              "name": "elements"
            }
          ],
          "method": "GET",
          "params": [["", ""]],
          "queryParams": "",
          "refId": "A",
          "urlPath": "/form?device=$device"
        }
      ],
      "title": "Server-based Elements",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "marcusolsson-json-datasource",
        "uid": "serverapi"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 0
      },
      "id": 2,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "/**\n * Update device variable\n */\n\nif (context.element.id === 'device') {\n  context.grafana.locationService.partial({\n    'var-device': context.element.value,\n  })\n}",
        "elements": [],
        "initial": {
          "code": "/**\n * Convert JSON to form elements array\n */\nconst formElements = JSON.parse(context.panel.data.series[0].fields[0].values[0])\n/**\n * Set elements with helpers\n */\ncontext.panel.onChangeLayout(formElements.map((element) => {\n  const elementInForm = context.panel.elements.find((item) => item.uid === element.uid);\n  let value = element.value;\n\n  if (element.uid === 'comment' && elementInForm) {\n    value = elementInForm.value;\n  }\n\n  return {\n    ...element,\n    value,\n    section:'new2',\n    helpers: {\n      showIf: () => true,\n      disableIf: () => false,\n      getOptions: () => element.options,\n    }\n  }\n}), [{ name: 'new1', id: 'new1' }, { name: 'new3', id: 'new3' }, { name: 'new2', id: 'new2' }]\n);\n",
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "vertical",
          "padding": 10,
          "sectionVariant": "collapsable",
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "cacheDurationSeconds": 300,
          "datasource": {
            "type": "marcusolsson-json-datasource",
            "uid": "serverapi"
          },
          "fields": [
            {
              "jsonPath": "$",
              "language": "jsonpath",
              "name": "elements"
            }
          ],
          "method": "GET",
          "params": [["", ""]],
          "queryParams": "",
          "refId": "A",
          "urlPath": "/form?device=$device"
        }
      ],
      "title": "Server-based Elements change layout",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "marcusolsson-static-datasource",
        "uid": "P1D2C73DC01F2359B"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 4,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "initial": {
          "code": "const ids = context.panel.data.series[0].fields[0].values\nconst names = context.panel.data.series[0].fields[1].values\n\nconst sections = ids.map((item, index) => ({\n  id: item,\n  name: names[index]\n}))\n\ncontext.panel.addSections(sections)",
          "contentType": "application/json",
          "getPayload": "return {}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "vertical",
          "padding": 10,
          "sectionVariant": "default",
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": false,
        "update": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "method": "-",
          "payload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "frame": {
            "fields": [
              {
                "config": {},
                "name": "id",
                "type": "string",
                "values": ["id-1", "id-2", "id-3"]
              },
              {
                "config": {},
                "name": "name",
                "type": "string",
                "values": ["Section 1", "Section 2", "Section 3"]
              }
            ],
            "meta": {}
          },
          "refId": "A"
        }
      ],
      "title": "Add new section",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "marcusolsson-json-datasource",
        "uid": "serverapi"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 8
      },
      "id": 3,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "/**\n * Update device variable\n */\n\nif (context.element.id === 'device') {\n  context.grafana.locationService.partial({\n    'var-device': context.element.value,\n  })\n}",
        "elements": [],
        "initial": {
          "code": "/**\n * Convert JSON to form elements array\n */\nconst formElements = JSON.parse(context.panel.data.series[0].fields[0].values[0])\n/**\n * Set elements with helpers\n */\ncontext.panel.onChangeLayout(formElements.map((element) => {\n  const elementInForm = context.panel.elements.find((item) => item.uid === element.uid);\n  let value = element.value;\n\n  if (element.uid === 'comment' && elementInForm) {\n    value = elementInForm.value;\n  }\n\n  return {\n    ...element,\n    value,\n    section: 'new2',\n    helpers: {\n      showIf: () => true,\n      disableIf: () => false,\n      getOptions: () => element.options,\n    }\n  }\n})\n);\n",
          "contentType": "application/json",
          "datasource": "PostgreSQL",
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "highlight": false,
          "highlightColor": "red",
          "method": "query",
          "payload": {}
        },
        "layout": {
          "orientation": "vertical",
          "padding": 10,
          "sectionVariant": "collapsable",
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {\n  rawSql: '',\n  format: 'table',\n}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": true,
        "update": {
          "code": "if (context.panel.response && context.panel.response.ok) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occured updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;\n\n/**\n * Data Source payload\n */ \nreturn {\n  rawSql: '',\n  format: 'table',\n};",
          "method": "-",
          "payload": {},
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "cacheDurationSeconds": 300,
          "datasource": {
            "type": "marcusolsson-json-datasource",
            "uid": "serverapi"
          },
          "fields": [
            {
              "jsonPath": "$",
              "language": "jsonpath",
              "name": "elements"
            }
          ],
          "method": "GET",
          "params": [["", ""]],
          "queryParams": "",
          "refId": "A",
          "urlPath": "/form?device=$device"
        }
      ],
      "title": "Server-based Elements add section from elements",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "marcusolsson-static-datasource",
        "uid": "P1D2C73DC01F2359B"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 0,
        "y": 16
      },
      "id": 5,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "hidden": false,
            "id": "String",
            "labelWidth": 10,
            "section": "test-1",
            "title": "String",
            "tooltip": "",
            "type": "string",
            "uid": "0b25cbd4-4926-4fc3-9cf7-554cfced3bfe",
            "unit": "",
            "value": ""
          }
        ],
        "initial": {
          "code": "const ids = context.panel.data.series[0].fields[0].values\nconst names = context.panel.data.series[0].fields[1].values\n\nconst sections = ids.map((item, index) => ({\n  id: item,\n  name: names[index]\n}))\n\ncontext.panel.onChangeSections(sections)",
          "contentType": "application/json",
          "getPayload": "return {}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "vertical",
          "padding": 10,
          "sectionVariant": "default",
          "sections": [
            {
              "id": "test-1",
              "name": "Test Section"
            }
          ],
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": false,
        "update": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "method": "-",
          "payload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "frame": {
            "fields": [
              {
                "config": {},
                "name": "id",
                "type": "string",
                "values": ["id-1", "id-2", "id-3"]
              },
              {
                "config": {},
                "name": "name",
                "type": "string",
                "values": ["Section 1", "Section 2", "Section 3"]
              }
            ],
            "meta": {}
          },
          "refId": "A"
        }
      ],
      "title": "Change Sections",
      "type": "volkovlabs-form-panel"
    },
    {
      "datasource": {
        "type": "marcusolsson-static-datasource",
        "uid": "P1D2C73DC01F2359B"
      },
      "fieldConfig": {
        "defaults": {},
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 12,
        "x": 12,
        "y": 16
      },
      "id": 6,
      "options": {
        "buttonGroup": {
          "orientation": "center",
          "size": "md"
        },
        "confirmModal": {
          "body": "Please confirm to update changed values",
          "cancel": "Cancel",
          "columns": {
            "include": ["name", "oldValue", "newValue"],
            "name": "Label",
            "newValue": "New Value",
            "oldValue": "Old Value"
          },
          "confirm": "Confirm",
          "elementDisplayMode": "modified",
          "title": "Confirm update request"
        },
        "elementValueChanged": "",
        "elements": [
          {
            "hidden": false,
            "id": "String",
            "labelWidth": 10,
            "section": "test-1",
            "title": "String",
            "tooltip": "",
            "type": "string",
            "uid": "0b25cbd4-4926-4fc3-9cf7-554cfced3bfe",
            "unit": "",
            "value": ""
          }
        ],
        "initial": {
          "code": "const ids = context.panel.data.series[0].fields[0].values\nconst names = context.panel.data.series[0].fields[1].values\n\nconst sections = ids.map((item, index) => ({\n  id: item,\n  name: names[index]\n}))\n\ncontext.panel.addSections(sections)",
          "contentType": "application/json",
          "getPayload": "return {}",
          "highlight": false,
          "highlightColor": "red",
          "method": "-",
          "payload": {}
        },
        "layout": {
          "orientation": "vertical",
          "padding": 10,
          "sectionVariant": "default",
          "sections": [
            {
              "id": "test-1",
              "name": "Test Section"
            }
          ],
          "variant": "split"
        },
        "reset": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "process",
          "text": "Reset",
          "variant": "hidden"
        },
        "resetAction": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "getPayload": "return {}",
          "mode": "initial",
          "payload": {}
        },
        "saveDefault": {
          "icon": "save",
          "text": "Save Default",
          "variant": "hidden"
        },
        "submit": {
          "backgroundColor": "purple",
          "foregroundColor": "yellow",
          "icon": "cloud-upload",
          "text": "Submit",
          "variant": "primary"
        },
        "sync": false,
        "update": {
          "code": "if (context.panel.response) {\n  context.grafana.notifySuccess(['Update', 'Values updated successfully.']);\n  context.grafana.locationService.reload();\n} else {\n  context.grafana.notifyError(['Update', 'An error occurred updating values.']);\n}",
          "confirm": false,
          "contentType": "application/json",
          "getPayload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "method": "-",
          "payload": "const payload = {};\n\ncontext.panel.elements.forEach((element) => {\n  if (!element.value) {\n    return;\n  }\n\n  payload[element.id] = element.value;\n})\n\nreturn payload;",
          "payloadMode": "all"
        },
        "updateEnabled": "auto"
      },
      "pluginVersion": "4.9.0",
      "targets": [
        {
          "frame": {
            "fields": [
              {
                "config": {},
                "name": "id",
                "type": "string",
                "values": ["id-1", "id-2", "id-3"]
              },
              {
                "config": {},
                "name": "name",
                "type": "string",
                "values": ["Section 1", "Section 2", "Section 3"]
              }
            ],
            "meta": {}
          },
          "refId": "A"
        }
      ],
      "title": "Add Sections",
      "type": "volkovlabs-form-panel"
    }
  ],
  "preload": false,
  "refresh": "",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {
          "text": "device2",
          "value": "device2"
        },
        "datasource": {
          "type": "marcusolsson-static-datasource",
          "uid": "P1D2C73DC01F2359B"
        },
        "definition": "",
        "includeAll": false,
        "name": "device",
        "options": [],
        "query": {
          "frame": {
            "fields": [
              {
                "config": {},
                "name": "name",
                "type": "string",
                "values": ["device1", "device2"]
              }
            ],
            "meta": {}
          }
        },
        "refresh": 1,
        "regex": "",
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Server-based",
  "uid": "f430fe0c-2487-4a02-a495-941c85b1e21d",
  "version": 12,
  "weekStart": ""
}
